import axios from 'axios'
import React, { useEffect, useRef, useState } from 'react'
import { toast } from 'react-toastify'
import { useDispatch, useSelector } from 'react-redux'
import { json, useParams } from 'react-router-dom'
import { baseURL } from '../../App'
import TextField from '@mui/material/TextField'
import Button from '@mui/material/Button'
import Grid from '@mui/material/Grid'
import Typography from '@mui/material/Typography'
import Paper from '@mui/material/Paper'
import Table from '@mui/material/Table'
import TableBody from '@mui/material/TableBody'
import TableCell from '@mui/material/TableCell'
import TableContainer from '@mui/material/TableContainer'
import TableHead from '@mui/material/TableHead'
import TableRow from '@mui/material/TableRow'
import EditorV2 from '../../components/EditorV2'
import Quill from 'quill'
import CreditScoreIcon from '@mui/icons-material/CreditScore'
import LocalShippingIcon from '@mui/icons-material/LocalShipping'
import { RiErrorWarningFill } from 'react-icons/ri'
import ErrorIcon from '@mui/icons-material/Error'
import { TfiReload } from 'react-icons/tfi'
import { FaRegArrowAltCircleDown } from 'react-icons/fa'
import { TbTruckDelivery } from 'react-icons/tb'

import {
  getOrder,
  calculateTotalQuantity,
  calculateTotalPrice,
  calculateTotalExpressPrice,
} from '../../redux/saleOrderSlice'
import LoadingFn from '../../components/LoadingFn'

export default function CustomerByOrderV2() {
  const [range, setRange] = useState()
  const dispatch = useDispatch()
  let { user } = useSelector((store) => store.user)
  let { order, isLoading, totalQuantity, totalPrice, totalExpressPrice } =
    useSelector((store) => store.saleOrder)
  // console.log(order.picture_payment)

  const Delta = Quill.import('delta')
  const [image, setImage] = useState(new Delta().insert(''))
  const [readOnly, setReadOnly] = useState(false)
  const [lastChange, setLastChange] = useState()
  const quillRef = useRef()
  const { id } = useParams()

  let form = useRef()
  const [isDisabled, setIsDisabled] = useState(false) // ‡∏™‡∏£‡πâ‡∏≤‡∏á state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å getOrder ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
  useEffect(() => {
    if (id) {
      dispatch(getOrder(id))
    }
  }, [])

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì totalQuantity, totalPrice, ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• order ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
  useEffect(() => {
    if (order && order.orders && order.orders.length > 0) {
      dispatch(calculateTotalQuantity())
      dispatch(calculateTotalPrice())
      dispatch(calculateTotalExpressPrice())
      try {
        setImage(JSON.parse(order.picture_payment))
      } catch (error) {
        toast.warning('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏à‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà / ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô')
      }
    }
  }, [order])

  useEffect(() => {
    if (quillRef.current) {
      quillRef.current.setContents(image) // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö Editor
    }
  }, [image]) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ image ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á

  if (isLoading) {
    return <LoadingFn />
  }

  const cancelPayment = async () => {
    const formData = new FormData()
    formData.append('_id', order._id)
    formData.append('isPayment', false)
    formData.append('picture_payment', '')
    setImage('')

    try {
      await axios.put(`${baseURL}/api/sale-order/j`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      })
      toast.success('‡∏õ‡∏é‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
      dispatch(getOrder(id))
    } catch (error) {
      console.error(error)
      toast.error('Payment: There was an error!')
    }
  }

  const confirmPayment = async () => {
    try {
      await axios.put(`${baseURL}/api/sale-order/complete/${id}`, {
        orders: order.orders.map((o) => ({
          order_id: o._id,
          quantity: o.quantity,
        })),
      })

      toast.success('‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡πâ‡∏ß')
      window.location.reload()
    } catch (error) {
      toast.error('Payment: There was an error!')
    }
  }

  const confirmSended = async () => {
    try {
      await axios.put(`${baseURL}/api/sale-order/sended/${id}`, {
        express: order.express, // Add this line to send the express value
      })
      toast.success('‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡πâ‡∏ß')
      window.location.reload()
    } catch (error) {
      toast.error('Sended: There was an error!')
    }
  }

  const handleSubmit = async (e) => {
    e.preventDefault()

    setIsDisabled(true)

    const formData = new FormData(form.current)
    formData.append('_id', order._id)
    formData.append('isPayment', true)
    formData.append(
      'picture_payment',
      JSON.stringify(quillRef.current?.getContents())
    )

    // const formEnt = Object.fromEntries(formData.entries())
    // console.log(formEnt.picture_payment)

    try {
      await axios.put(`${baseURL}/api/sale-order/j`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      })
      toast.success('Success')
      dispatch(getOrder(id))
    } catch (error) {
      console.error(error)
      toast.error('Submit: There was an error!')
    }
  }

  let dt = new Date(Date.parse(order.date_added))
  let df = dt.toISOString().substring(0, 10) // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD
  let sum = totalPrice + totalExpressPrice

  return (
    <div className="container position-relative mt-3 mx-auto">
      <h3 className="text-start mb-3">
        <span className="text-success ms-2 text-center">
          ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì {order.name}
          {order.complete && (
            <>
              <p className="mt-3 text-success">
                <CreditScoreIcon /> ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß
              </p>
              {order.sended && (
                <>
                  <p className="mt-3 text-warning">
                    <LocalShippingIcon /> ‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß
                  </p>
                </>
              )}
            </>
          )}
        </span>
      </h3>

      <div className="card shadow">
        <div className="text-center">
          <br />
          <span> Order :</span>
          <span className="text-danger">#{id}</span> <br />
          --------------------------------------------
          <br />
          <br />
          ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå 012-345-6789
          <br />
          ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏™‡∏¥‡∏Å‡∏£ (KBANK) 012-345-6789
          <br />
          ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ‡∏ô‡∏≤‡∏¢‡πÄ‡∏à‡∏©‡∏é‡∏≤‡∏Å‡∏£ ‡∏Ñ‡∏∏‡πâ‡∏°‡πÄ‡∏î‡∏ä
          <br />
          <br />
          --------------------------------------------
          <br />
          üôè ‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ üí¢ ‡πÇ‡∏≠‡∏ô‡∏¢‡∏≠‡∏î‡∏ö‡∏¥‡∏•‡∏ï‡πà‡∏≠‡∏ö‡∏¥‡∏•‡∏ô‡∏∞‡∏Ñ‡∏∞
          ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏≠‡∏ü‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞üí¢
          <br /> üí¢‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡∏´‡∏±‡∏Å‡∏•‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏≠‡∏á ‡πÇ‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏∞
          ‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏¢‡∏≠‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏∞ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡∏Ñ‡πà‡∏∞üôè
          <br /> üôè ‡∏ñ‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ï‡∏≥‡∏´‡∏ô‡∏¥‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏µ‡∏ö‡πÅ‡∏à‡πâ‡∏á ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
          ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ï‡∏≥‡∏´‡∏ô‡∏¥‡∏à‡∏≤‡∏Å‡∏£‡πâ‡∏≤‡∏ô ‡∏™‡πà‡∏á‡∏ú‡∏¥‡∏î‡∏™‡∏µ‡∏ú‡∏¥‡∏î‡πÅ‡∏ö‡∏ö ‡∏ú‡∏¥‡∏î‡πÑ‡∏ã‡∏™‡πå ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡∏∞
          ‡∏Ç‡∏≠‡∏ö‡∏û‡∏£‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡∏Ñ‡∏∞üôè
          <br />
          <br />
        </div>
      </div>

      <TableContainer component={Paper} className="mt-3 mb-3">
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>
                <strong>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà</strong>
              </TableCell>
              <TableCell>
                <strong>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</strong>
              </TableCell>
              <TableCell>
                <strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</strong>
              </TableCell>
              <TableCell>
                <strong>‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ø)</strong>
              </TableCell>
            </TableRow>
          </TableHead>

          <TableBody>
            {order.orders &&
              order.orders.length > 0 &&
              order.orders.map((o, index) => (
                <TableRow key={o.id}>
                  <TableCell>{index + 1}</TableCell>
                  <TableCell>{o.name}</TableCell>
                  <TableCell>{o.quantity}</TableCell>
                  <TableCell>
                    {o.price
                      .toFixed(0)
                      .replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1,')}
                  </TableCell>
                </TableRow>
              ))}
            <TableRow>
              <TableCell colSpan={3} className="text-end">
                ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏ß‡∏°
              </TableCell>
              <TableCell>{totalQuantity}</TableCell>
            </TableRow>

            <TableRow>
              <TableCell colSpan={3} className="text-end">
                ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏ß‡∏°
              </TableCell>
              <TableCell>
                {totalPrice
                  .toFixed(0)
                  .replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1,')}
              </TableCell>
            </TableRow>

            <TableRow>
              <TableCell colSpan={3} className="text-end">
                ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á
              </TableCell>
              <TableCell>{totalExpressPrice}</TableCell>
            </TableRow>

            <TableRow>
              <TableCell colSpan={3} className="text-end">
                ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞
              </TableCell>
              <TableCell>
                {sum.toFixed(0).replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1,')}
              </TableCell>
            </TableRow>
          </TableBody>
        </Table>
      </TableContainer>

      <Paper elevation={3} className="mt-4 p-4">
        <Typography variant="h6" gutterBottom>
          ‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        </Typography>

        <form onSubmit={handleSubmit} ref={form} encType="multipart/form-data">
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <TextField
                fullWidth
                type="date"
                name="date_added"
                defaultValue={df}
                disabled={order.isPayment}
                required
              />
            </Grid>

            <Grid item xs={4}>
              <TextField
                label="‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
                fullWidth
                name="name"
                defaultValue={order.name}
                disabled={order.isPayment}
                required
              />
            </Grid>

            <Grid item xs={8}>
              <TextField
                label="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà"
                fullWidth
                name="address"
                defaultValue={order.address}
                disabled={order.isPayment}
                required
              />
            </Grid>

            <Grid item xs={4}>
              <TextField
                label="‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á"
                fullWidth
                name="district"
                defaultValue={order.district}
                disabled={order.isPayment}
                required
              />
            </Grid>

            <Grid item xs={4}>
              <TextField
                label="‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï"
                fullWidth
                name="sub_area"
                defaultValue={order.sub_area}
                disabled={order.isPayment}
                required
              />
            </Grid>

            <Grid item xs={4}>
              <TextField
                label="‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"
                fullWidth
                name="sub_district"
                defaultValue={order.sub_district}
                disabled={order.isPayment}
                required
              />
            </Grid>

            <Grid item xs={6}>
              <TextField
                label="‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå"
                fullWidth
                name="postcode"
                defaultValue={order.postcode}
                disabled={order.isPayment}
                required
              />
            </Grid>

            <Grid item xs={6}>
              <TextField
                label="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"
                fullWidth
                name="tel"
                defaultValue={order.tel}
                disabled={order.isPayment}
                required
              />
            </Grid>

            <Grid item xs={12}>
              <Typography variant="h6" gutterBottom>
                ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
              </Typography>
              <EditorV2
                ref={quillRef}
                readOnly={readOnly}
                onSelectionChange={setRange}
                onTextChange={setLastChange}
                defaultValue={image}
              />
            </Grid>

            {order.sended ? (
              <Grid
                item
                xs={12}
                container
                direction="column"
                alignItems="center"
                justifyContent="center"
              >
                <Typography
                  sx={{
                    display: 'flex', // ‡πÉ‡∏ä‡πâ Flexbox ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á
                    alignItems: 'center', // ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÉ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
                    textAlign: 'center',
                  }}
                >
                  ‡∏£‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏•‡∏Ç‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ &nbsp;
                  <TbTruckDelivery color="green" size={25} />
                </Typography>
              </Grid>
            ) : (
              <Grid
                item
                xs={12}
                container
                direction="column"
                alignItems="center"
                justifyContent="center"
              >
                {order.complete ? (
                  <Typography
                    sx={{
                      display: 'flex', // ‡πÉ‡∏ä‡πâ Flexbox ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á
                      alignItems: 'center', // ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÉ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
                      textAlign: 'center',
                    }}
                  >
                    ‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÄ‡∏•‡∏Ç‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤&nbsp;
                    <ErrorIcon color="warning" />
                  </Typography>
                ) : (
                  <>
                    {order.isPayment != '' && (
                      <Typography
                        sx={{
                          display: 'flex', // ‡πÉ‡∏ä‡πâ Flexbox ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á
                          alignItems: 'center', // ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÉ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
                          textAlign: 'center',
                        }}
                      >
                        ‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô&nbsp;
                        <ErrorIcon color="warning" />
                      </Typography>
                    )}
                  </>
                )}
              </Grid>
            )}

            {!order.picture_payment && (
              <Grid
                item
                xs={12}
                container
                direction="column"
                alignItems="center"
                justifyContent="center"
              >
                <Button
                  type="submit"
                  variant="contained"
                  color="primary"
                  disabled={isDisabled}
                >
                  ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                </Button>
              </Grid>
            )}

            {user.role && !order.complete && (
              <>
                <Grid
                  item
                  xs={6}
                  container
                  direction="column"
                  alignItems="center"
                  justifyContent="center"
                >
                  <Button
                    type="button"
                    variant="contained"
                    color="error"
                    onClick={cancelPayment}
                  >
                    ‡∏õ‡∏é‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
                  </Button>
                </Grid>

                <Grid
                  item
                  xs={6}
                  container
                  direction="column"
                  alignItems="center"
                  justifyContent="center"
                >
                  <Button
                    type="button"
                    variant="contained"
                    color="success"
                    onClick={confirmPayment}
                  >
                    ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
                  </Button>
                </Grid>
              </>
            )}

            {order.complete && (
              <Grid item xs={12}>
                <TextField
                  label="‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
                  fullWidth
                  name="express"
                  defaultValue={order.express}
                  disabled={order.sended}
                  required
                />
              </Grid>
            )}

            {(user.role == 'admin' || user.role == 'user') && (
              <>
                {order.complete && (
                  <>
                    {order.sended ? (
                      <Grid
                        item
                        xs={12}
                        container
                        direction="column"
                        alignItems="center"
                        justifyContent="center"
                      >
                        <Button
                          type="button"
                          variant="contained"
                          color="error"
                          onClick={confirmSended}
                        >
                          ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
                        </Button>
                      </Grid>
                    ) : (
                      <Grid
                        item
                        xs={12}
                        container
                        direction="column"
                        alignItems="center"
                        justifyContent="center"
                      >
                        <Button
                          type="button"
                          variant="contained"
                          color="warning"
                          onClick={confirmSended}
                        >
                          ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                        </Button>
                      </Grid>
                    )}
                  </>
                )}
              </>
            )}
          </Grid>
        </form>
      </Paper>
    </div>
  )
}
